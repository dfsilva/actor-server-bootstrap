// We need it in application.conf because reference.conf can't refer to application.conf, this is a work-around
include file("conf/custom.conf")

secret: ${?ACTOR_SECRET}

project-name: conecta-server
actor-system-name: conecta-server

services {
  postgresql {
    host: "postgres"
    host: ${?ACTOR_DB_HOST}

    db: actor
    db: ${?ACTOR_DB_NAME}

    user: "actor"
    user: ${?ACTOR_DB_USER}

    password: ""
    password: ${?ACTOR_DB_PASSWORD}
  }

  activation {

    repeat-limit: 1m
    code-expiration: 1 day
    code-attempts: 3

    internal {
      sender-user-id: 10
      online-time-window: 10m
      message-template: "Your activation code is: $$CODE$$"
    }

    providers {
      sms:  im.actor.server.activation.plivio.PlivioSMSProvider
      smtp: im.actor.server.activation.smtp.SMTPProvider
    }
  }

  actor-activation {
    uri: "https://gate.actor.im"
    auth-token: ${?ACTOR_GATE_TOKEN}
  }

  zenvia {
    customer-id: xloto
    api-key: 8rO7xb4TyJ,
    message-template: "$$SYSTEM_NAME$$: Seu código de ativação é: $$CODE$$"
  }

  plivio {
    auth-id: "MANMM3OGEWMWM3MGY1NT"
    auth-id: ${?PLIVIO_AUTH_ID}
    auth-token: "M2NjYWJhMmRhMTZlZDZhMGU5ZWRmNzNhNjFhNTEz"
    auth-token: ${?PLIVIO_AUTH_TOKEN}
    src-number: "5561991262545"
    src-number: ${?PLIVIO_SRC_NUMBER}
    message-template: "$$SYSTEM_NAME$$: Your activation code: $$CODE$$"
    message-template: ${?ACTIVATION_MESSAGE_TEMPLATE}
  }

  actor {
    push {
      token: ""
      token: ${?ACTOR_PUSH_TOKEN}
    }
  }

  file-storage {
    location: "/files"
    location: ${?ACTOR_FILESTORAGE_LOCATION}
    thread-pool-size: 20
    max-file-size: 50000000 #bytes
  }

  google {
    gcm {
      keys = [{
        project-id: 157558192914
        key: "AIzaSyAxFlQgZ09crRnBsiLG0Jr23Bv5_3Fw3i0"
      }]
    },
    firebase {
      keys = [{
        project-id: 157558192914
        key: "AAAAJK8zOxI:APA91bE6vvxbjGWRVR4YVrya4LxPyYqPsyNgPZ-Ob_nh8gfRrh_M6twyaVlsQKzcLypiLynJxuH-oPsilPPHPWDeRwDTZyUAWio1C5WDfe8v7mwc9rSwbNfihQkGcu92wGtFOJRKcMxw"
      }]
    }
  }

  # Accessing Apple servers for push notifications
  apple {
    push {
      certs = [{
        key: 235609
        bundleId: "br.com.diegosilva.conecta"
        path: ${?ACTOR_APPLE_CERT_PATH}
        password: ${?ACTOR_APPLE_CERT_PASSWORD}
        sandbox: true
        sandbox: ${?ACTOR_APPLE_CERT_SANDBOX}
        voip: false
      },{
        key: 235609
        path: ${?ACTOR_APPLE_VOIP_CERT_PATH}
        password: ${?ACTOR_APPLE_VOIP_CERT_PASSWORD}
        sandbox: true
        sandbox: ${?ACTOR_APPLE_CERT_SANDBOX}
        voip: true
      }]
    }
  }

  email {
    sender {
      address: ""
      address: ${?ACTOR_EMAIL_SENDER_ADDRESS}
      name: "Conecta"
      name: ${?ACTOR_EMAIL_SENDER_NAME}
      prefix: "[Conecta]"
    }

    smtp {
      host: ""
      host: ${?ACTOR_SMTP_HOST}
      port: 465
      port: ${?ACTOR_SMTP_PORT}
      username: ""
      username: ${?ACTOR_SMTP_USERNAME}
      password: ""
      password: ${?ACTOR_SMTP_PASSWORD}
      tls: true
      tls: ${?ACTOR_SMTP_TLS}
      ssl: true
      ssl: ${?ACTOR_SMTP_SSL}
    }
  }
}

http {
  base-uri = ${?ACTOR_API_ENDPOINT}
}

common {
  default-timeout: 120000
}

session {
  idle-timeout: 40 minutes

  resend {
    ack-timeout: 10 minutes
    max-resend-size: 1 KiB
    max-buffer-size: 500 KiB
    max-push-buffer-size: 30KiB
  }

  rpc {
    max-cached-result-size: 20 KiB
    ack-delay: 15 seconds
    max-cached-results: 10
  }
}

modules {

  messaging {
    groups {
      invite {
        base-uri: "https://example.com"
        base-uri: ${?ACTOR_INVITE_LINK}
      }
    }
  }

  files {
    adapter: "im.actor.server.file.local.LocalFileStorageAdapter"
  }

  security {
    server-keys: [
      {
        public: "/keys/actor-key-0.pub"
        private: "/keys/actor-key-0.key"
      }
      {
        public: "/keys/actor-key-1.pub"
        private: "/keys/actor-key-1.key"
      }
      {
        public: "/keys/actor-key-2.pub"
        private: "/keys/actor-key-2.key"
      }
      {
        public: "/keys/actor-key-3.pub"
        private: "/keys/actor-key-3.key"
      }
    ]
  }

  api {
    endpoint = ${?ACTOR_API_ENDPOINT}
  }

  raw {
    rpc: "im.actor.server.api.rpc.service.raw.RawServiceImpl"
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serialize-creators = off
    debug {
      receive = off
      lifecycle = off
    }
  }

  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      # Internal Docker
      bind-hostname = "0.0.0.0"
      bind-port = 2552
      bind-port = ${?CLUSTER_PORT}

      # External Docker addr
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
  }
}

clustering {
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}
  port = 2552
  port = ${?CLUSTER_PORT}
  seed-ip = "127.0.0.1"
  seed-ip = ${?SEED_IP}
  seed-port = 2552
  seed-port = ${?SEED_PORT}
  cluster.name = conecta-server
}
